/**
 * $Id: ${UPPER_CLASS_NAME}ManagerImpl.java,v 1.0 2012/08/19 17:09:49 GanJianping Exp $
 *
 * Copyright (c) 2012 Gan Jianping. All rights reserved
 * Coss Project
 *
 */
package ${BASE_PACKAGE}.${MODULE_NAME}.service.impl;

import ${BASE_PACKAGE}.${MODULE_NAME}.model.${UPPER_CLASS_NAME};
import ${BASE_PACKAGE}.${MODULE_NAME}.service.${UPPER_CLASS_NAME}Manager;
import org.ganjp.jpw.core.dao.BaseDao;
import org.ganjp.jpw.core.service.BaseManager;
import org.ganjp.jpw.core.util.StringUtil;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import java.util.List;
import javax.annotation.Resource;


/**
 * <p>${UPPER_CLASS_NAME}ManagerImpl</p>
 * 
 * @author GanJianping
 * @since 1.0
 */
@Service 
public class ${UPPER_CLASS_NAME}ManagerImpl extends BaseManager implements ${UPPER_CLASS_NAME}Manager {
	
	//------------------------------------------- Save Or Update   ------------------------------------------
	/**
	 * <p>save new ${LOWER_CLASS_NAME}</p>
	 * 
	 * @param ${UPPER_CLASS_NAME}
	 */
	@Transactional
	public void save(${UPPER_CLASS_NAME} ${LOWER_CLASS_NAME}) {
		dao.save(${LOWER_CLASS_NAME});
	}

	/**
	 * <p>update new ${LOWER_CLASS_NAME}</p>
	 * 
	 * @param ${UPPER_CLASS_NAME}
	 */
	@Transactional
	public void update(${UPPER_CLASS_NAME} ${LOWER_CLASS_NAME}) {
		dao.update(${LOWER_CLASS_NAME});
	}
	/**
	 * <p>save or update new ${LOWER_CLASS_NAME}</p>
	 * 
	 * @param ${UPPER_CLASS_NAME}
	 */
	@Transactional
	public void saveOrUpdate(${UPPER_CLASS_NAME} ${LOWER_CLASS_NAME}) {
		dao.saveOrUpdate(${LOWER_CLASS_NAME});
	}
		
	//-------------------------------------------   delete   ------------------------------------------
	/**
	 * <p>delete the ${LOWER_CLASS_NAME}</p>
	 * 
	 * @param ${LOWER_CLASS_NAME} the ${LOWER_CLASS_NAME} must be from session or transient object that has primary key attribute
	 */
	@Transactional
	public void delete(${UPPER_CLASS_NAME} ${LOWER_CLASS_NAME}) {
		dao.delete(${LOWER_CLASS_NAME});
	}
	/**
	 * <p>delete a ${LOWER_CLASS_NAME} by primary key</p>
	 * 
	 * @param PK
	 */
	@Transactional
	public void delete(final String pk) {
		dao.delete(${UPPER_CLASS_NAME}.class, pk);
	}
	/**
	 * <p>batchDelete</p>
	 * 
	 * @param pks
	 */
	@Transactional
	public void batchDelete(final String pks) {
		String hql = "delete from ${UPPER_CLASS_NAME} where ${ID} in (" + StringUtil.getStrWithQuote(pks) + ")";
		dao.batchExecute(hql);
	}	
	//-------------------------------------------   find   ------------------------------------------
	//------------return ${UPPER_CLASS_NAME}
	/**
	 * <p>get ${UPPER_CLASS_NAME} object by primary key</p>
	 * 
	 * @param PK
	 * @return ${UPPER_CLASS_NAME}
	 */
	@Transactional
	public ${UPPER_CLASS_NAME} get${UPPER_CLASS_NAME}ById(final String id) {
		${UPPER_CLASS_NAME} ${LOWER_CLASS_NAME} = dao.findById(${UPPER_CLASS_NAME}.class, id);
		return ${LOWER_CLASS_NAME};
	}
	
	/**
	 * <p>get all ${UPPER_CLASS_NAME} objects</p>
	 *
	 * @return List<${UPPER_CLASS_NAME}>
	 */
	@Transactional
	public List<${UPPER_CLASS_NAME}> get${UPPER_CLASS_NAME}s() {
		return dao.findAllWithOrder(${UPPER_CLASS_NAME}.class, "modifyTimestamp", false);
	}
	
	/**
	 * <p>get all ${UPPER_CLASS_NAME} objects and support order</p>
	 *
	 * @param String
	 * @param boolean
	 * @return List<${UPPER_CLASS_NAME}>
	 */
	@Transactional
	public List<${UPPER_CLASS_NAME}> get${UPPER_CLASS_NAME}sWithOrder(String orderBy, boolean isAsc)  {
		return dao.findAllWithOrder(${UPPER_CLASS_NAME}.class, orderBy, isAsc);
	}
	
	/**
	 * <p>get ${UPPER_CLASS_NAME} objects by fieldName</p>
	 * 
	 * @param String
	 * @param Object
	 * @return List<${UPPER_CLASS_NAME}>
	 */
	@Transactional
	public List<${UPPER_CLASS_NAME}> get${UPPER_CLASS_NAME}sByField(final String fieldName, final Object value) {
		return dao.findByField(${UPPER_CLASS_NAME}.class, fieldName, value, "modifyTimestamp", false);
	}
	
	@Resource(name="baseDaoHibernate")
	private BaseDao<${UPPER_CLASS_NAME}, String> dao;
}